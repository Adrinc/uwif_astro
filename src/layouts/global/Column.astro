---
/* FLUTTER LIKE COLUMN */
interface Props {
    key: string;
    mainAxisAlignment?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';
    crossAxisAligment?: 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'baseline' | 'initial' | 'inherit';
    mainAxisSize?: 'min-content' | 'max-content' | 'fit-content' | 'fill' | 'inherit' | 'initial' | 'unset';
    warp?: 'nowrap' | 'wrap' | 'wrap-reverse';
    textDirection?: 'left' | 'right' | 'center' | 'end' | 'justify';
    reverse?: boolean;
    scrollable?:boolean;
    gap?:number;
    color?:string;
    flexGrow?:number;
    flexShrink?:number;
    padding?:number;
    
}



let { 
    mainAxisAlignment = 'flex-start', 
    crossAxisAligment='flex-start', 
    mainAxisSize='max-content', 
    warp='nowrap', 
    textDirection='left', 
    reverse=false, 
    gap=0,
    color='#transparent',
    flexGrow=1,
    flexShrink=0,
    padding=0,
    key }: Props = Astro.props;
---

<div id={key} class:list=`flex ${reverse==true ? "flex-col-reverse" : "flex-col"} ` 
style={`
--justify-content: ${mainAxisAlignment};
--align-items: ${crossAxisAligment};
--flex-wrap: ${warp};
--text-direction: ${textDirection};
--main-axis-size: ${mainAxisSize};
--gap: ${gap}px;
--color: ${color};
--flex-grow: ${flexGrow};
--flex-shrink: ${flexShrink};
--padding: ${padding}px;
`}>
    <slot />
</div>

<style>
 
    div {
        justify-content: var(--justify-content);
        align-items: var(--align-items);
        flex-wrap: var(--flex-wrap);
        text-direction: var(--text-direction);
        main-axis-size: var(--main-axis-size);
        height: 100%;
        gap: var(--gap)px;
        background-color: var(--color);
        flex-grow: var(--flex-grow);
        flex-shrink: var(--flex-shrink);
        padding: var(--padding)px;
        
    }
</style>